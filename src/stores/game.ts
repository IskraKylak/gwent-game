import { defineStore } from 'pinia'
import { usePlayerStore } from './player'
import { useEnemyStore } from './enemy'

export const useGameStore = defineStore('game', {
  state: () => ({
    round: 1,
    turn: 'player' as 'player' | 'enemy',
    roundsWon: { player: 0, enemy: 0 }
  }),

  actions: {
    // –°—Ç–∞—Ä—Ç –≥—Ä–∏
    startGame() {
      const player = usePlayerStore()
      const enemy = useEnemyStore()

      player.init()
      enemy.init()

      this.round = 1
      this.turn = 'player'
      this.roundsWon = { player: 0, enemy: 0 }

      // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É –≥—Ä–∞–≤—Ü—è —Ç–∞ –≤–æ—Ä–æ–≥–∞
      this.$subscribe(() => {
        this.checkRoundEnd()
      })
    },

    // –•—ñ–¥ –≥—Ä–∞–≤—Ü—è
    playerPlayCard(cardId: string) {
      const player = usePlayerStore()
      const enemy = useEnemyStore()

      const card = player.hand.find(c => c.id === cardId)
      if (!card || player.passed) return

      player.playCard(card)

      // –ü—ñ—Å–ª—è —Ö–æ–¥—É –≥—Ä–∞–≤—Ü—è ‚Äî —Ö—ñ–¥ –≤–æ—Ä–æ–≥–∞
      setTimeout(() => {
        this.turn = 'enemy'
        enemy.autoPlay(player.score)
        this.turn = 'player'
      }, 1000)
    },

    // –ü–∞—Å –≥—Ä–∞–≤—Ü—è
    playerPass() {
      const player = usePlayerStore()
      const enemy = useEnemyStore()
      player.pass()

      const isFinalRound = this.roundsWon.player === 1 && this.roundsWon.enemy === 1 // —Ç–æ–±—Ç–æ —è–∫—â–æ –≤—ñ–Ω –≤–∂–µ –≤–∏–≥—Ä–∞–≤ 1 —Ä–∞—É–Ω–¥
      enemy.finishRound(player.score, isFinalRound)
      setTimeout(() => {
        this.checkRoundEnd()
      }, 1000)
    },

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–Ω—Ü—è —Ä–∞—É–Ω–¥—É
    checkRoundEnd() {
      const player = usePlayerStore()
      const enemy = useEnemyStore()

      if (player.passed && enemy.passed) {
        let winner: 'player' | 'enemy' | 'draw' = 'draw'

        if (player.score > enemy.score) {
          this.roundsWon.player++

          const card = player.deck.shift()!
          player.hand.push(card)


          console.log(`üéâ –ì—Ä–∞–≤–µ—Ü—å –≤–∏–≥—Ä–∞–≤ —Ä–∞—É–Ω–¥ ${this.round}`)
        } else if (enemy.score > player.score) {
          this.roundsWon.enemy++

          const card = enemy.deck.shift()!
          enemy.hand.push(card)

          console.log(`üíÄ –í–æ—Ä–æ–≥ –≤–∏–≥—Ä–∞–≤ —Ä–∞—É–Ω–¥ ${this.round}`)
        } else {
          this.roundsWon.enemy++
          this.roundsWon.player++
          console.log(`‚öñÔ∏è –ù—ñ—á–∏—è —É —Ä–∞—É–Ω–¥—ñ ${this.round}`)
        }

        // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞—É–Ω–¥—É
        this.round++
        player.board = []
        enemy.board = []
        player.passed = false
        enemy.passed = false

                // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ, —Ö—Ç–æ —Ö–æ–¥–∏—Ç—å –ø–µ—Ä—à–∏–º –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä–∞—É–Ω–¥
        

        if (this.roundsWon.player === 2) {
          console.log('üèÜ –ì—Ä–∞–≤–µ—Ü—å –≤–∏–≥—Ä–∞–≤ –≥—Ä—É!')
        }
        if (this.roundsWon.enemy === 2) {
          console.log('‚ò†Ô∏è –í–æ—Ä–æ–≥ –≤–∏–≥—Ä–∞–≤ –≥—Ä—É!')
        }

        if (winner !== 'draw') {
          if (winner === 'enemy') {
            setTimeout(() => enemy.autoPlay(player.score), 500)
          }
        } else {
          setTimeout(() => enemy.autoPlay(player.score), 500) // –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø—Ä–∏ –Ω—ñ—á—ñ—ó
        }
      }
    }
  }
})
